import React, { Component, useRef } from 'react';
import { Animated, View, Text, Dimensions, ViewPropTypes } from 'react-native';
import PropTypes from 'prop-types';

import { ScrollView } from 'react-native-gesture-handler';
import styles from "./HorizontalScrollPickerStyle";

import { holdOrTapeColors } from "../../../../src/constants/holdOrTapeColors";

// https://github.com/moxorama/react-native-horizontal-scroll-picker

/** 
    Width has to be the same size as the parent div, 
    otherwise there's overflow and the picker items magically appear from the sides of the screen
*/
const width = Dimensions.get("window").width * 0.9 - 8;
const rowItems = 5;

class HorizontalScrollPicker extends Component {
    constructor(props) {
        super(props);

        const size = (width / props.rowItems);

        this.state = {
            size,
            selected: props.initialIdx,
        };

        this.scrollView = null;
        this.scrollOffset = 0;
        this.isParking = false;
    }


    _calculateLayout = (event) => {
        this.scrollView.scrollTo({ x: this.props.initialIdx * this.state.size, y: 0, animated: true });
    };

    _renderItem = (item, idx) => {
        const { size, selected } = this.state;
        const { itemStyle, textStyle, selectedTextStyle } = this.props;
        const { label, value } = item;

        // Check to determine if we're handling colors
        const isColor = holdOrTapeColors.includes(label);
        const bgColor = isColor ? label.toLowerCase() : "none";
        // Render light font against dark backgrounds
        const txtColor = isColor && ["Red", "Green", "Blue", "Purple", "Black"].includes(label) ? "white" : "black"; 

        return (
            <View
                className={"h-picker-item"}
                key={`item-${idx}-${value}`}
                style={[
                    styles.itemContainer,
                    {
                        gap: 10,
                        marginTop: 20,
                        height: 60,
                        marginHorizontal: 4,
                        width: size,
                        backgroundColor: bgColor,
                        color: txtColor,
                        opacity: 0.7,
                        borderRadius: 10,
                        borderWidth: 0,
                        borderColor: "none",
                    },
                    (selected == idx) && {
                        borderWidth: isColor ? 2 : 0,
                        borderColor: "black",
                        opacity: 1.0,
                    },
                    itemStyle,
                ]}
            >
                <Text style={[styles.item, textStyle,
                    (selected == idx) && selectedTextStyle,
                    {
                        color: txtColor
                    }
                ]}>
                    {label}
                </Text>
            </View>
        );
    };

    _handleScroll = (event) => {
        this.scrollOffset = event.nativeEvent.contentOffset.x;
    };

    _handleParking = () => {
        const { size } = this.state;
        const { onSelect, items } = this.props;

        this.isParking = true;

        setTimeout(() => {
            if (this.isParking) {
                const selected = this._selectItem();
                this.setState({
                    selected,
                });
                this.isParking = false;
                this.scrollView.scrollTo({ y: 0, x: (size + 8) * selected, animated: true });
                onSelect(items[selected].value);
            }
        }, 150);
    };

    _cancelParking = () => {
        this.isParking = false;
    }

    _selectItem = () => {
        console.log(`_selectItem`)
        const { items, onSelect } = this.props;
        const { size } = this.state;

        const idx = Math.abs(Math.round(this.scrollOffset / (size + 8)));
        const selected = idx === items.length ? idx - 1 : idx;

        this.setState({
            selected,
        });

        onSelect(items[selected].value);
        return selected;
    }

    render() {
        const { items, rowItems, containerStyle, selectorStyle } = this.props;
        const { size } = this.state;

        const sideItems = (rowItems - 1) / 2;

        return (
            <View style={[styles.timelineContainer, { width: rowItems * size }, containerStyle]}>
                <View
                    style={[
                        styles.selectedItem,
                        {
                            left: sideItems * (size + 2),
                            width: size,
                        },
                        selectorStyle
                    ]}
                />
                <Animated.ScrollView
                    horizontal
                    ref={(ref) => (this.scrollView = ref)}
                    showsHorizontalScrollIndicator={false}
                    onLayout={this._calculateLayout}
                    // snapToAlignment={"center"}
                    onScroll={this._handleScroll} 
                    onTouchEnd={this._handleParking}
                    onScrollEndDrag={this._handleParking}
                    scrollEventThrottle={24}
                    onMomentumScrollBegin={this._cancelParking}
                    onMomentumScrollEnd={this._handleParking}
                    onSelect={this._selectItem}
                    shouldCancelWhenOutside={false}
                    contentContainerStyle={{
                        paddingLeft: size * sideItems,
                        paddingRight: size * sideItems,
                    }}
                >
                    {items.map((item, idx) => this._renderItem(item, idx))}
                </Animated.ScrollView>
            </View>
        );
    }
}

HorizontalScrollPicker.propTypes = {
    rowItems: PropTypes.number,
    containerStyle: PropTypes.shape({
        style: PropTypes.any,
    }), 
    itemStyle: PropTypes.shape({
        style: PropTypes.any,
    }),  
    selectorStyle: PropTypes.shape({
        style: PropTypes.any,
    }), 
    textStyle: PropTypes.shape({
        style: PropTypes.any,
    }),
    selectedTextStyle: PropTypes.shape({
        style: PropTypes.any,
    }),
    items: PropTypes.array,
    onSelect: PropTypes.func.isRequired,
    initialIdx: PropTypes.number.isRequired
};

HorizontalScrollPicker.defaultProps = {
    rowItems: rowItems,
    items: [],
    initialIdx: 0,
};

export default HorizontalScrollPicker;
